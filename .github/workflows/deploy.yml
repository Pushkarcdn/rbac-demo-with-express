name: RBAC Demo Backend Deployment

on:
  push:
    branches: [main]

env:
  PROJECT_NAME: rbac-demo-with-express
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SERVER_PASS: ${{ secrets.SERVER_PASS }}
  APP_ENV: ${{ secrets.APP_ENV }}
  NODE_ENV: production
  EXTERNAL_PORT: 4002
  INTERNAL_PORT: 4002
  WORKDIR: /app

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: |
          if ! command -v sshpass &> /dev/null; then
            sudo apt update && sudo apt install sshpass -y
          else
            echo "sshpass is already installed"
          fi

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/arm64

      - name: Build Node Docker image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --file Dockerfile \
            --load \
            -t ${{ env.PROJECT_NAME }}:latest \
            --build-arg WORKDIR="${{ env.WORKDIR }}" \
            --build-arg NODE_ENV="${{ env.NODE_ENV }}" \
            --build-arg INTERNAL_PORT="${{ env.INTERNAL_PORT }}" \
            .

      - name: Save Docker image
        run: |
          docker save -o /tmp/${{ env.PROJECT_NAME }}-temp-app.tar ${{ env.PROJECT_NAME }}:latest

      - name: Deploy to server
        run: |
          sshpass -p "${{ env.SERVER_PASS }}" scp -o StrictHostKeyChecking=no /tmp/${{ env.PROJECT_NAME }}-temp-app.tar ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:/tmp/
          sshpass -p "${{ env.SERVER_PASS }}" scp -o StrictHostKeyChecking=no docker-compose.yml ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:/tmp/

          sshpass -p "${{ env.SERVER_PASS }}" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "bash -s" << 'EOF'
            # Create password script for sudo
            echo '#!/bin/bash
            echo "${{ env.SERVER_PASS }}"' > /tmp/askpass.sh
            chmod +x /tmp/askpass.sh

            # Set environment variables
            export SUDO_ASKPASS=/tmp/askpass.sh
            export WORKDIR=${{ env.WORKDIR }}

            # Create and configure application directory
            sudo -A mkdir -p ./projects/${{ env.PROJECT_NAME }}
            sudo -A chown $USER:$USER ./projects/${{ env.PROJECT_NAME }}
            sudo -A chmod 755 ./projects/${{ env.PROJECT_NAME }} 

            # Update environment file
            sudo -A rm -rf ./projects/${{ env.PROJECT_NAME }}/.env.production || true
            sudo -A echo "${{ env.APP_ENV }}" > ./projects/${{ env.PROJECT_NAME }}/.env.production
            sudo -A chmod 644 ./projects/${{ env.PROJECT_NAME }}/.env.production  

            # remove old container if it exists
            sudo -A docker rm -f ${{ env.PROJECT_NAME }} 2>/dev/null || true

            # remove old image if it exists
            sudo -A docker rmi -f ${{ env.PROJECT_NAME }}:latest 2>/dev/null || true

            # Load new image
            sudo -A docker load -i /tmp/${{ env.PROJECT_NAME }}-temp-app.tar

            # kill the port if it is in use
            sudo -A kill -9 $(sudo -A lsof -t -i :${{ env.EXTERNAL_PORT }}) 2>/dev/null || true

            # Deploy with compose
            sudo -A mv /tmp/docker-compose.yml ./projects/${{ env.PROJECT_NAME }}/
            cd ./projects/${{ env.PROJECT_NAME }}
            sudo -A docker compose up -d --force-recreate
            sudo -A ufw allow ${{ env.EXTERNAL_PORT }}

            # Cleanup
            sudo -A rm -f /tmp/${{ env.PROJECT_NAME }}-temp-app.tar
            rm -f /tmp/askpass.sh
          EOF
          